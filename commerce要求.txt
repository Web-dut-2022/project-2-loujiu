商务
设计一个类似于ebay的电子商务拍卖网站，允许用户发布拍卖列表，对列表进行竞价，对这些列表进行评论，并将列表添加到“观察列表”中。

理解
在分发代码中有一个名为commerce的Django项目，它包含一个名为auctions的应用程序。
首先，打开auctions/urls.py，其中定义了这个应用程序的URL配置。注意，我们已经为您编写了一些url，包括一个默认索引路由、一个/login路由、一个/logout路由和一个/register路由。
查看auctions/views.py，查看与这些路由相关联的视图。index视图现在返回一个几乎空的index.html模板。当用户试图获取页面时，login_view视图呈现一个登录表单。当用户使用POST请求方法提交表单时，用户将被验证、登录并重定向到索引页。logout_view视图将用户注销，并将其重定向到索引页。最后，register路由向用户显示一个注册表单，并在表单提交时创建一个新用户。所有这些都是在发布代码中为您完成的，因此您现在应该能够运行应用程序来创建一些用户。
运行python manage.py runserver启动Django web服务器，并在浏览器中访问该网站。点击“注册”，注册一个账号。您应该看到，您现在已经“以用户帐户登录”，页面顶部的链接已经更改。HTML是如何改变的?查看auctions/templates/auctions/layout. HTML中这个应用程序的HTML布局。注意，模板的几个部分被封装在user.is_authenticated检查中，这样就可以根据用户是否登录呈现不同的内容。如果您想在布局中添加或修改任何内容，欢迎您更改此文件!
最后，看一下auctions/models.py。这是你为你的web应用程序定义任何模型的地方，每个模型代表你想存储在你的数据库中的某些类型的数据。我们首先介绍了表示应用程序每个用户的User模型。因为它继承了AbstractUser，所以它已经有了用户名、电子邮件、密码等字段，但是如果有希望表示的关于用户的额外信息，欢迎您向User类添加新的字段。您还需要向该文件添加其他模型，以表示关于拍卖清单、出价、评论和拍卖类别的详细信息。记住，每次你修改auctions/models.py中的任何内容时，你都需要首先运行python manage.py makemigrations，然后运行python manage.py migrate，将这些更改迁移到你的数据库中。

规范
完成执行您的拍卖网站。你必须符合以下要求:
（√）模型:除了使用模型之外，您的Use模型至少应该有三个模型:一个用于拍卖清单，一个用于投标，一个用于对拍卖清单进行评论。由您来决定每个模型应该具有哪些字段，以及这些字段的类型。如果您需要的话，您还有其他型号的。 
（√）创建列表:用户应该能够访问一个页面来创建一个新的列表。他们应该能够为列表指定一个标题，一个基于文本的描述，以及起价应该是什么。用户还应该可以选择提供一个URL为清单和/或类别(如时尚，玩具，电子产品，家庭等)的图像。
（√）活动列表页面:你的web应用程序的默认路径应该允许用户查看所有当前活动的拍卖列表。对于每个活动列表，这个页面应该显示(至少)标题、描述、当前价格和照片(如果列表中有照片的话)。
（√）列表页:单击列表应该将用户带到该列表特定的页面。在该页面上，用户应该能够查看有关该列表的所有详细信息，包括该列表的当前价格。
	（√）如果用户已登录，用户应该能够将该项目添加到他们的“Watchlist”中。如果项目已经在监视列表中，用户应该能够删除它。
	（√）如果用户已登录，用户应该能够对该项目进行投标。投标必须至少与起拍价一样大，并且必须大于任何其他已经发出的投标(如果有的话)。如果出价不符合这些标准，用户应该看到一个错误。
	（√）如果用户已登录，并且是创建该列表的用户，则该用户应该有能力从该页面“关闭”拍卖，这将使出价最高的竞标者成为拍卖的获胜者，并使该列表不再活跃。
	（√）如果用户在一个关闭的列表页面上登录，并且该用户赢得了拍卖，页面应该这样说。
	（√）已登录的用户应该能够向清单页面添加注释。清单页面应该显示在清单上做出的所有注释。
（√）Watchlist:登录的用户应该能够访问Watchlist页面，该页面应该显示用户添加到其Watchlist中的所有列表。单击这些列表中的任何一个，用户就会进入该列表的页面。
（√）类别:用户应该能够访问显示所有列表类别列表的页面。单击任何类别的名称，应该会将用户带到显示该类别中所有活动清单的页面。
（√）Django管理界面:通过Django管理界面，网站管理员应该能够查看、添加、编辑和删除网站上的所有列表、评论和竞价。

提示
1. 运行python manage.py createsuperuser命令，创建一个可以访问Django管理界面的超级用户帐户。
2. 请参阅Model field reference，了解Django模型中可能的字段类型。
3.你可能需要为这个web应用程序的各个部分创建一些Django forms。
4. 将@login_require装饰器添加到任何视图的顶部将确保只有登录的用户才能访问该视图。
https://docs.djangoproject.com/en/4.0/topics/auth/default/
5. 欢迎您尽可能多地修改CSS，以使网站成为您自己的!本页面顶部显示了一些示例截图。这些只是示例:您的应用程序不需要在美学上与这里的截图相同(鼓励您具有创造性!)